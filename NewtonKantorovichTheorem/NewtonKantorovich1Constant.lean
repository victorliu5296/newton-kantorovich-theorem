import Mathlib.Analysis.Calculus.ContDiff.Defs
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import NewtonKantorovichTheorem.MeanValueBanach
import NewtonKantorovichTheorem.CLMBound

open Set Topology Metric ContinuousLinearMap

section NewtonKantorovich1Constant

-- Define the variables for Banach spaces X and Y
variable {X Y : Type*}
  [NormedAddCommGroup X] [NormedSpace ‚Ñù X] [CompleteSpace X]
  [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y] [CompleteSpace Y]
variable [Nontrivial X] [Nontrivial Y]
-- Define the open subset Œ© of X
variable (Œ© : Set X) (hŒ© : IsOpen Œ©)
-- Define the point x‚ÇÄ in Œ©
variable (x‚ÇÄ : X) (hx‚ÇÄ : x‚ÇÄ ‚àà Œ©)
-- Define the C¬π mapping f: Œ© ‚Üí Y
variable (f : X ‚Üí Y) (hf : ContDiffOn ‚Ñù 1 f Œ©)
-- Define the radius r
variable (r : ‚Ñù) (hr : 0 < r)
-- Define f' as a mapping
variable (f' : X ‚Üí X ‚âÉL[‚Ñù] Y)
         (hf' : ‚àÄ x ‚àà Œ©, HasFDerivAt f (f' x : X ‚ÜíL[‚Ñù] Y) x)
variable (a b : X) (hab : ‚àÄ t, t ‚àà Icc (0 : ‚Ñù) 1 ‚Üí (a + t ‚Ä¢ (b - a)) ‚àà Œ©)

-- Define the parameteric path Œ≥ from a to b
def Œ≥ (a b : X) : ‚Ñù ‚Üí X := fun t ‚Ü¶ a + t ‚Ä¢ (b - a)

lemma Œ≥_continuous (a b : X) (t : ‚Ñù) : ContinuousWithinAt (Œ≥ a b) (Icc 0 1) t := by
  apply ContinuousWithinAt.add
  ¬∑ exact continuousWithinAt_const
  ¬∑ apply ContinuousWithinAt.smul
    ¬∑ exact continuousWithinAt_id
    ¬∑ exact continuousWithinAt_const

noncomputable def f'_clm : X ‚Üí X ‚ÜíL[‚Ñù] Y := fun x ‚Ü¶ (f' x).toContinuousLinearMap

lemma f'_clm_continuous {Œ© : Set X}  {f : X ‚Üí Y}
    {f' : X ‚Üí X ‚âÉL[‚Ñù] Y}
    (hŒ© : IsOpen Œ©) (hf : ContDiffOn ‚Ñù 1 f Œ©)
    (hf' : ‚àÄ x ‚àà Œ©, HasFDerivAt f (f' x : X ‚ÜíL[‚Ñù] Y) x) :
    ContinuousOn (f'_clm f') Œ© := by
  have h_fderiv_cont : ContinuousOn (fun x ‚Ü¶ fderiv ‚Ñù f x) Œ© := by
    apply ContDiffOn.continuousOn_fderiv_of_isOpen hf hŒ©
    norm_num
  apply ContinuousOn.congr h_fderiv_cont
  intro x hx
  simp [f'_clm]
  exact Eq.symm (HasFDerivAt.fderiv (hf' x hx))

lemma f'_cont : ContinuousOn (f' x : X ‚ÜíL[‚Ñù] Y) Œ© := by fun_prop

lemma f'_cont_a_b : ContinuousOn (fun t : ‚Ñù ‚Ü¶ (f' (a + t ‚Ä¢ (b - a)) : X ‚ÜíL[‚Ñù] Y)) (Icc 0 1) := by
  have h_comp : ContinuousOn (f'_clm f' ‚àò Œ≥ a b) (Icc 0 1):= by
    apply ContinuousOn.comp
    ¬∑ exact f'_clm_continuous hŒ© hf hf'
    ¬∑ intro t _
      exact Œ≥_continuous a b t
    ¬∑ exact hab
  exact h_comp

-- Assumptions
variable (h_subset : closedBall x‚ÇÄ r ‚äÜ Œ©)
variable (h_bound1 : ‚Äñ(f' x‚ÇÄ).symm (f x‚ÇÄ)‚Äñ ‚â§ r / 2)
variable (h_bound2 : ‚àÄ (u v : X), u ‚àà closedBall x‚ÇÄ r ‚Üí v ‚àà closedBall x‚ÇÄ r ‚Üí
  -- ‚àÄ x : X, ‚Äñ(f' x‚ÇÄ).inverse ((f' u - f' v) x)‚Äñ ‚â§ (1 / r) * ‚Äñu - v‚Äñ * ‚Äñx‚Äñ)
  ‚Äñ((f' x‚ÇÄ).symm : Y ‚ÜíL[‚Ñù] X).comp ((f' u : X ‚ÜíL[‚Ñù] Y) - (f' v : X ‚ÜíL[‚Ñù] Y))‚Äñ ‚â§ (1 / r) * ‚Äñu - v‚Äñ)

-- Newton iteration sequence
noncomputable def newton_seq : Nat ‚Üí X
| 0       => x‚ÇÄ
| (n + 1) => newton_seq n - (f' (newton_seq n)).symm (f (newton_seq n))

-- Auxiliary function h
noncomputable def h (x : X) : X := (f' x‚ÇÄ).symm (f x)
noncomputable def h' (x : X) : X ‚âÉL[‚Ñù] X := (f' x).trans (f' x‚ÇÄ).symm
variable (hh' : ‚àÄ x ‚àà Œ©, HasFDerivAt (h x‚ÇÄ f f') (h' x‚ÇÄ f' x : X ‚ÜíL[‚Ñù] X) x)

lemma h'_eq_deriv : ‚àÄ x ‚àà Œ©, h' x‚ÇÄ f' x = fderiv ‚Ñù (h x‚ÇÄ f f') x := by
  exact fun x a ‚Ü¶ Eq.symm (HasFDerivAt.fderiv (hh' x a))

lemma h'x‚ÇÄ_eq_id : h' x‚ÇÄ f' x‚ÇÄ = ContinuousLinearMap.id ‚Ñù X := by
  unfold h'
  ext x‚ÇÄ.symm_apply_apply
  aesop

lemma h'x‚ÇÄ_symm_eq_id: (h' x‚ÇÄ f' x‚ÇÄ).symm = ContinuousLinearMap.id ‚Ñù X := by
  unfold h'
  ext x‚ÇÄ.symm_apply_apply
  aesop

lemma h'_cont_a_b : ContinuousOn (fun t : ‚Ñù ‚Ü¶ ((h' x‚ÇÄ f') (a + t ‚Ä¢ (b - a)) : X ‚ÜíL[‚Ñù] X)) (Icc 0 1) := by
  sorry

-- (i) Estimates
lemma h_inverse_bound (x : X) (hx : x ‚àà ball x‚ÇÄ r) :
    ‚Äñ((h' x‚ÇÄ f' x).symm : X ‚ÜíL[‚Ñù] X)‚Äñ ‚â§ 1 / (1 - ‚Äñx - x‚ÇÄ‚Äñ / r) := by
  have h_derivative_bound : ‚Äñ(h' x‚ÇÄ f' x : X ‚ÜíL[‚Ñù] X) - (h' x‚ÇÄ f' x‚ÇÄ : X ‚ÜíL[‚Ñù] X)‚Äñ ‚â§ ‚Äñx - x‚ÇÄ‚Äñ / r := by
    have hx_in_ball : x ‚àà closedBall x‚ÇÄ r := by
      exact ball_subset_closedBall hx
    have h_bound := h_bound2 x x‚ÇÄ hx_in_ball (mem_closedBall_self (le_of_lt hr))
    repeat' rw [h']
    calc ‚Äñ(((f' x‚ÇÄ).symm : Y ‚ÜíL[‚Ñù] X).comp (f' x : X ‚ÜíL[‚Ñù] Y)) - (((f' x‚ÇÄ).symm : Y ‚ÜíL[‚Ñù] X).comp (f' x‚ÇÄ : X ‚ÜíL[‚Ñù] Y))‚Äñ
      _ = ‚Äñ((f' x‚ÇÄ).symm : Y ‚ÜíL[‚Ñù] X).comp ((f' x : X ‚ÜíL[‚Ñù] Y) - (f' x‚ÇÄ : X ‚ÜíL[‚Ñù] Y))‚Äñ := by simp [sub_eq_add_neg, comp_sub]
      _ ‚â§ 1 / r * ‚Äñx - x‚ÇÄ‚Äñ := by apply h_bound
      _ = ‚Äñx - x‚ÇÄ‚Äñ / r := by rw [mul_comm, mul_div]; simp

  have dist_lt_one : ‚Äñx - x‚ÇÄ‚Äñ / r < 1 := by
    refine (div_lt_one hr).mpr ?_
    exact mem_ball_iff_norm.mp hx

  have h_derivative_lt_one : ‚Äñ(h' x‚ÇÄ f' x : X ‚ÜíL[‚Ñù] X) - (h' x‚ÇÄ f' x‚ÇÄ : X ‚ÜíL[‚Ñù] X)‚Äñ < 1 := by
    apply lt_of_lt_of_le'
    ¬∑ exact dist_lt_one
    ¬∑ exact h_derivative_bound

  calc ‚Äñ((h' x‚ÇÄ f' x).symm : X ‚ÜíL[‚Ñù] X)‚Äñ
    _ ‚â§ ‚Äñ((h' x‚ÇÄ f' x‚ÇÄ).symm : X ‚ÜíL[‚Ñù] X)‚Äñ / (1 - ‚Äñ((h' x‚ÇÄ f' x‚ÇÄ).symm : X ‚ÜíL[‚Ñù] X).comp ((h' x‚ÇÄ f' x : X ‚ÜíL[‚Ñù] X) - (h' x‚ÇÄ f' x‚ÇÄ : X ‚ÜíL[‚Ñù] X))‚Äñ) := by
      apply invertible_of_near_invertible
      rw [h'x‚ÇÄ_symm_eq_id]
      simp [h_derivative_lt_one]
    _ = 1 / (1 - ‚Äñ(h' x‚ÇÄ f' x : X ‚ÜíL[‚Ñù] X) - (h' x‚ÇÄ f' x‚ÇÄ : X ‚ÜíL[‚Ñù] X)‚Äñ) := by
      simp [h'x‚ÇÄ_eq_id, h'x‚ÇÄ_symm_eq_id]
    _ ‚â§ 1 / (1 - ‚Äñx - x‚ÇÄ‚Äñ / r) := by
      refine one_div_le_one_div_of_le ?ha ?h
      ¬∑ linarith [dist_lt_one]
      ¬∑ linarith [h_derivative_bound]

lemma h_difference_bound (u v : X) (hu : u ‚àà closedBall x‚ÇÄ r) (hv : v ‚àà closedBall x‚ÇÄ r) :
  ‚Äñh x‚ÇÄ f f' u - h x‚ÇÄ f f'  v - h' x‚ÇÄ f' v (u - v)‚Äñ ‚â§ (1 / (2 * r)) * ‚Äñu - v‚Äñ^2 := by
sorry

-- (ii) Newton iterates properties
lemma newton_iterates_properties :
  ‚àÄ k : ‚Ñï,
    newton_seq x‚ÇÄ f f' k ‚àà ball x‚ÇÄ r ‚àß
    ‚Äñnewton_seq x‚ÇÄ f f' k - newton_seq x‚ÇÄ f f' (k-1)‚Äñ ‚â§ r / 2^k ‚àß
    ‚Äñnewton_seq x‚ÇÄ f f' k - x‚ÇÄ‚Äñ ‚â§ r * (1 - 1 / 2^k) ‚àß
    ‚Äñ((h' x‚ÇÄ f' (newton_seq x‚ÇÄ f f' k)).symm : X ‚ÜíL[‚Ñù] X)‚Äñ ‚â§ 2^k ‚àß
    ‚Äñh x‚ÇÄ f f' (newton_seq x‚ÇÄ f f' k)‚Äñ ‚â§ r / 2^(2*k+1) := by
sorry

-- (iii) Convergence to zero
lemma newton_seq_converges :
  ‚àÉ a, a ‚àà closedBall x‚ÇÄ r ‚àß
      Filter.Tendsto (newton_seq x‚ÇÄ f f') atTop (ùìù a) ‚àß
      f a = 0 ‚àß
      ‚àÄ k, ‚Äñnewton_seq x‚ÇÄ f f' k - a‚Äñ ‚â§ r / 2^k := by
sorry

-- (iv) Uniqueness of zero
lemma zero_unique (a b : X) (ha : a ‚àà closedBall x‚ÇÄ r) (hb : b ‚àà closedBall x‚ÇÄ r)
  (hfa : f a = 0) (hfb : f b = 0) : a = b := by
sorry

theorem newton_kantorovich_1_const :
  (‚àÄ k : Nat, (newton_seq x‚ÇÄ f f' k) ‚àà closedBall x‚ÇÄ r) ‚àß
  (‚àÉ! a ‚àà closedBall x‚ÇÄ r, f a = 0 ‚àß ‚àÄ k : Nat, ‚Äñnewton_seq x‚ÇÄ f f' k - a‚Äñ ‚â§ r / 2^k) := by
sorry

end NewtonKantorovich1Constant
